WARNING: Missing commit description - Add an appropriate one

WARNING: Missing or malformed SPDX-License-Identifier tag in line 1
#5: FILE: file.c:1:
+

WARNING: Misplaced SPDX-License-Identifier tag - use line 1 instead
#8: FILE: file.c:4:
+// SPDX-License-Identifier: GPL-2.0

ERROR: open brace '{' following function definitions go on the next line
#267: FILE: file.c:197:
+static int ouichefs_open(struct inode *inode, struct file *file) {

ERROR: trailing whitespace
#295: FILE: file.c:225:
+^I$

WARNING: Block comments should align the * on each line
#301: FILE: file.c:231:
+/*Create the block entry based on the 12 bits of the block size
+* and the 20 bits of the block number

ERROR: open brace '{' following function definitions go on the next line
#303: FILE: file.c:233:
+uint32_t create_block_entry(uint32_t block_number, uint32_t block_size) {

WARNING: please, no spaces at the start of a line
#304: FILE: file.c:234:
+    return (block_size << 20) | (block_number & BLOCK_NUMBER_MASK);$

ERROR: open brace '{' following function definitions go on the next line
#308: FILE: file.c:238:
+uint32_t get_block_number(uint32_t entry) {

WARNING: please, no spaces at the start of a line
#309: FILE: file.c:239:
+    return (entry & BLOCK_NUMBER_MASK);$

ERROR: open brace '{' following function definitions go on the next line
#313: FILE: file.c:243:
+uint32_t get_block_size(uint32_t entry) {

WARNING: please, no spaces at the start of a line
#314: FILE: file.c:244:
+    return (entry & BLOCK_SIZE_MASK) >> 20;$

WARNING: line length of 108 exceeds 100 columns
#318: FILE: file.c:248:
+/*In summarry this function enables users to retrieve data from a file by copying it into a provided buffer.

WARNING: Block comments should align the * on each line
#319: FILE: file.c:249:
+/*In summarry this function enables users to retrieve data from a file by copying it into a provided buffer.
+* Here's a concisely its functionality:

WARNING: line length of 123 exceeds 100 columns
#323: FILE: file.c:253:
+* - It reads data from the determined data block into the user-provided buffer, ensuring not to read beyond the file's end.

WARNING: line length of 129 exceeds 100 columns
#325: FILE: file.c:255:
+* - It returns the number of bytes read, indicating a successful operation, or an error code if encountered during the process.*/

WARNING: Block comments use a trailing */ on a separate line
#325: FILE: file.c:255:
+* - It returns the number of bytes read, indicating a successful operation, or an error code if encountered during the process.*/

ERROR: trailing whitespace
#327: FILE: file.c:257:
+{^I$

WARNING: braces {} are not necessary for single statement blocks
#340: FILE: file.c:270:
+	if (*ppos >= inode->i_size) {
+		return bytes_read;
+	}

ERROR: trailing whitespace
#356: FILE: file.c:286:
+^I$

WARNING: Missing a blank line after declarations
#359: FILE: file.c:289:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(index->blocks[iblock]));
+	if (!bh) {

WARNING: Missing a blank line after declarations
#369: FILE: file.c:299:
+	size_t tmp = inode->i_size - *ppos;
+	bytes_to_read = min((size_t) OUICHEFS_BLOCK_SIZE, tmp);

WARNING: min() should probably be min_t(size_t, OUICHEFS_BLOCK_SIZE, tmp)
#369: FILE: file.c:299:
+	bytes_to_read = min((size_t) OUICHEFS_BLOCK_SIZE, tmp);

ERROR: trailing whitespace
#380: FILE: file.c:310:
+^I$

ERROR: trailing whitespace
#388: FILE: file.c:318:
+/*Read function for a file system implemented in the Linux kernel. $

ERROR: trailing whitespace
#389: FILE: file.c:319:
+* It is responsible for reading a fragment of data from a file, with additional $

WARNING: Block comments should align the * on each line
#389: FILE: file.c:319:
+/*Read function for a file system implemented in the Linux kernel. 
+* It is responsible for reading a fragment of data from a file, with additional 

ERROR: do not initialise statics to 0
#392: FILE: file.c:322:
+static int nb_block_read = 0; // Global counter to track the number of blocks read

WARNING: line length of 101 exceeds 100 columns
#393: FILE: file.c:323:
+static ssize_t ouichefs_read_fragment(struct file *filep, char __user *buf, size_t len, loff_t *ppos)

ERROR: trailing whitespace
#394: FILE: file.c:324:
+{^I$

ERROR: space prohibited after that open parenthesis '('
#409: FILE: file.c:339:
+	if ( nb_block_read >= inode->i_blocks - 1) {

WARNING: Missing a blank line after declarations
#430: FILE: file.c:360:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(bno));
+	if (!bh) {

ERROR: trailing whitespace
#434: FILE: file.c:364:
+^I$

ERROR: trailing whitespace
#441: FILE: file.c:371:
+^Iif (size != 0) { $

ERROR: trailing whitespace
#443: FILE: file.c:373:
+^I^I^Iif (bh->b_data[i] != 0){ $

ERROR: space required before the open brace '{'
#443: FILE: file.c:373:
+			if (bh->b_data[i] != 0){ 

ERROR: space required before the open brace '{'
#444: FILE: file.c:374:
+				if (start == -1){

WARNING: braces {} are not necessary for single statement blocks
#444: FILE: file.c:374:
+				if (start == -1){
+					start = i; // Start of non-zero data
+				}

ERROR: space required before the open brace '{'
#448: FILE: file.c:378:
+			}else{

ERROR: space required after that close brace '}'
#448: FILE: file.c:378:
+			}else{

ERROR: space required before the open brace '{'
#449: FILE: file.c:379:
+				if (start != -1){

WARNING: braces {} are not necessary for single statement blocks
#449: FILE: file.c:379:
+				if (start != -1){
+					break; // End of non-zero data
+				}

ERROR: space prohibited before that close parenthesis ')'
#471: FILE: file.c:401:
+	if (bytes_read >= size ) {

ERROR: trailing whitespace
#475: FILE: file.c:405:
+^I$

ERROR: trailing whitespace
#492: FILE: file.c:422:
+static int clean_block(struct super_block *sb, uint32_t block_entry) $

WARNING: Missing a blank line after declarations
#495: FILE: file.c:425:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(block_entry));
+	if (!bh) {

WARNING: Block comments should align the * on each line
#509: FILE: file.c:439:
+/*
+*This function does the basic write operation without optization.

ERROR: trailing whitespace
#539: FILE: file.c:469:
+^I$

WARNING: Missing a blank line after declarations
#542: FILE: file.c:472:
+	uint32_t nr_allocs = max(*ppos + (unsigned int) len, inode->i_size) / OUICHEFS_BLOCK_SIZE;
+	if (nr_allocs > inode->i_blocks - 1)

ERROR: trailing whitespace
#548: FILE: file.c:478:
+^I$

WARNING: Missing a blank line after declarations
#552: FILE: file.c:482:
+	bool app = (filep->f_flags & O_APPEND) != 0;
+	if (app) {

WARNING: braces {} are not necessary for single statement blocks
#552: FILE: file.c:482:
+	if (app) {
+		*ppos = inode->i_size;
+	}

WARNING: Missing a blank line after declarations
#581: FILE: file.c:511:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(bno));
+	if (!bh) {

WARNING: Missing a blank line after declarations
#604: FILE: file.c:534:
+	uint32_t block_size = get_block_size(bno);
+	block_size = (block_size + (uint32_t)bytes_write);

WARNING: Block comments use a trailing */ on a separate line
#643: FILE: file.c:559:
+}*/

ERROR: space required before that '*' (ctx:VxO)
#643: FILE: file.c:559:
+}*/
  ^

ERROR: space required after that close brace '}'
#643: FILE: file.c:559:
+}*/

ERROR: trailing whitespace
#647: FILE: file.c:563:
+// static int declencher_decalage(loff_t offset, int len, int idx_current_block,  int target_block, struct super_block *sb, struct ouichefs_file_index_block *index) $

WARNING: line length of 165 exceeds 100 columns
#647: FILE: file.c:563:
+// static int declencher_decalage(loff_t offset, int len, int idx_current_block,  int target_block, struct super_block *sb, struct ouichefs_file_index_block *index) 

WARNING: please, no space before tabs
#649: FILE: file.c:565:
+// ^Iint block_preced;$

WARNING: please, no space before tabs
#650: FILE: file.c:566:
+// ^Istruct buffer_head *bh_preced;$

WARNING: please, no space before tabs
#651: FILE: file.c:567:
+// ^Iuint32_t block_size_preced;$

WARNING: please, no space before tabs
#653: FILE: file.c:569:
+// ^Ifor(int i = idx_current_block; i >= target_block; i--) {$

WARNING: please, no space before tabs
#654: FILE: file.c:570:
+// ^I^Iint block = index->blocks[i];$

WARNING: please, no space before tabs
#655: FILE: file.c:571:
+// ^I^Istruct buffer_head *bh = sb_bread(sb, get_block_number(block));$

WARNING: please, no space before tabs
#656: FILE: file.c:572:
+// ^I^Iuint32_t block_size = get_block_size(bno);$

WARNING: please, no space before tabs
#657: FILE: file.c:573:
+// ^I^Iblock_preced = i + 1;$

WARNING: please, no space before tabs
#658: FILE: file.c:574:
+// ^I^I*bh_preced = sb_bread(sb, get_block_number(block_preced));$

WARNING: please, no space before tabs
#659: FILE: file.c:575:
+// ^I^Iblock_size_preced = get_block_size(block_preced);$

WARNING: please, no space before tabs
#660: FILE: file.c:576:
+// ^I^Iif(block_size != 0 || block_size != OUICHEFS_BLOCK_SIZE){$

WARNING: please, no space before tabs
#661: FILE: file.c:577:
+// ^I^I^Imemcpy(bh->b_data + block_size + len, bh->b_data, block_size);$

WARNING: please, no space before tabs
#662: FILE: file.c:578:
+// ^I^I}else if (i == target_block) {$

WARNING: please, no space before tabs
#663: FILE: file.c:579:
+// ^I^I^Imemcpy(bh_preced->b_data, bh->data + offset, len);$

WARNING: please, no space before tabs
#664: FILE: file.c:580:
+// ^I^I^Ireturn 0;$

WARNING: please, no space before tabs
#665: FILE: file.c:581:
+// ^I^I}else {$

WARNING: please, no space before tabs
#666: FILE: file.c:582:
+// ^I^I^Imemcpy(bh_preced->b_data, bh->data + block_size_preced - len, len);$

WARNING: please, no space before tabs
#667: FILE: file.c:583:
+// ^I^I^Imemcpy(bh->data + block_size_preced - len, bh->data, len);$

WARNING: please, no space before tabs
#668: FILE: file.c:584:
+// ^I^I}$

WARNING: please, no space before tabs
#669: FILE: file.c:585:
+// ^I}$

WARNING: line length of 107 exceeds 100 columns
#673: FILE: file.c:589:
+// static ssize_t ouichefs_write_plus(struct file *filep, const char __user *buf, size_t len, loff_t *ppos)

ERROR: trailing whitespace
#674: FILE: file.c:590:
+// {^I$

WARNING: please, no space before tabs
#675: FILE: file.c:591:
+// ^Istruct inode *inode = filep->f_inode;$

WARNING: please, no space before tabs
#676: FILE: file.c:592:
+// ^Istruct ouichefs_inode_info *ci = OUICHEFS_INODE(inode);$

WARNING: please, no space before tabs
#677: FILE: file.c:593:
+// ^Istruct super_block *sb = inode->i_sb;$

WARNING: please, no space before tabs
#678: FILE: file.c:594:
+// ^Istruct ouichefs_sb_info *sbi = OUICHEFS_SB(sb);$

WARNING: please, no space before tabs
#679: FILE: file.c:595:
+// ^Istruct buffer_head *bh_index;$

WARNING: please, no space before tabs
#680: FILE: file.c:596:
+// ^Istruct ouichefs_file_index_block *index;$

ERROR: trailing whitespace
#681: FILE: file.c:597:
+// ^Isize_t bytes_to_write; $

WARNING: please, no space before tabs
#681: FILE: file.c:597:
+// ^Isize_t bytes_to_write; $

WARNING: please, no space before tabs
#682: FILE: file.c:598:
+// ^Isize_t bytes_write = 0;$

WARNING: please, no space before tabs
#683: FILE: file.c:599:
+// ^Isize_t bytes_not_write;$

WARNING: please, no space before tabs
#684: FILE: file.c:600:
+// ^Isector_t iblock;$

WARNING: please, no space before tabs
#685: FILE: file.c:601:
+// ^Isize_t offset;$

WARNING: please, no space before tabs
#686: FILE: file.c:602:
+// ^Isize_t remaining;$

WARNING: please, no space before tabs
#687: FILE: file.c:603:
+// ^Iint bno;$

ERROR: trailing whitespace
#688: FILE: file.c:604:
+^I$

WARNING: please, no space before tabs
#689: FILE: file.c:605:
+// ^Iif (*ppos + len > OUICHEFS_MAX_FILESIZE)$

WARNING: please, no space before tabs
#690: FILE: file.c:606:
+// ^I^Ireturn -ENOSPC;$

WARNING: please, no space before tabs
#692: FILE: file.c:608:
+// ^Iuint32_t nr_allocs = max(*ppos + (unsigned int) len, inode->i_size) / OUICHEFS_BLOCK_SIZE;$

WARNING: please, no space before tabs
#693: FILE: file.c:609:
+// ^Iif (nr_allocs > inode->i_blocks - 1)$

WARNING: please, no space before tabs
#694: FILE: file.c:610:
+// ^I^Inr_allocs -= inode->i_blocks - 1;$

WARNING: please, no space before tabs
#695: FILE: file.c:611:
+// ^Ielse$

WARNING: please, no space before tabs
#696: FILE: file.c:612:
+// ^I^Inr_allocs = 0;$

WARNING: please, no space before tabs
#697: FILE: file.c:613:
+// ^Iif (nr_allocs > sbi->nr_free_blocks)$

WARNING: please, no space before tabs
#698: FILE: file.c:614:
+// ^I^Ireturn -ENOSPC;$

WARNING: please, no space before tabs
#700: FILE: file.c:616:
+// ^Ibool app = (filep->f_flags & O_APPEND) != 0;$

WARNING: please, no space before tabs
#701: FILE: file.c:617:
+// ^Iif (app) {$

WARNING: please, no space before tabs
#702: FILE: file.c:618:
+// ^I^I*ppos = inode->i_size;$

WARNING: please, no space before tabs
#703: FILE: file.c:619:
+// ^I}$

WARNING: please, no space before tabs
#705: FILE: file.c:621:
+// ^Ibh_index = sb_bread(sb, ci->index_block);$

WARNING: please, no space before tabs
#706: FILE: file.c:622:
+// ^Iif (!bh_index)$

WARNING: please, no space before tabs
#707: FILE: file.c:623:
+// ^I^Ireturn -EIO;$

WARNING: please, no space before tabs
#708: FILE: file.c:624:
+// ^Iindex = (struct ouichefs_file_index_block *)bh_index->b_data;$

WARNING: please, no space before tabs
#710: FILE: file.c:626:
+// ^Iiblock = *ppos / OUICHEFS_BLOCK_SIZE;$

WARNING: please, no space before tabs
#711: FILE: file.c:627:
+// ^Iif (index->blocks[iblock] == 0) {$

WARNING: please, no space before tabs
#712: FILE: file.c:628:
+// ^I^Ibno = get_free_block(sbi);$

WARNING: please, no space before tabs
#713: FILE: file.c:629:
+// ^I^Iif (!bno) {$

WARNING: please, no space before tabs
#714: FILE: file.c:630:
+// ^I^I^Ibrelse(bh_index);$

WARNING: please, no space before tabs
#715: FILE: file.c:631:
+// ^I^I^Ireturn -ENOSPC;$

WARNING: please, no space before tabs
#716: FILE: file.c:632:
+// ^I^I}$

WARNING: please, no space before tabs
#717: FILE: file.c:633:
+// ^I^Ibno = create_block_entry((uint32_t)bno, (uint32_t)0);$

WARNING: please, no space before tabs
#718: FILE: file.c:634:
+// ^I^Iclean_block(sb, bno);$

WARNING: please, no space before tabs
#719: FILE: file.c:635:
+// ^I^Iindex->blocks[iblock] = bno;$

WARNING: please, no space before tabs
#720: FILE: file.c:636:
+// ^I^Imark_buffer_dirty(bh_index);$

WARNING: please, no space before tabs
#721: FILE: file.c:637:
+// ^I^Isync_dirty_buffer(bh_index);$

WARNING: please, no space before tabs
#722: FILE: file.c:638:
+// ^I} else {$

WARNING: please, no space before tabs
#723: FILE: file.c:639:
+// ^I^Ibno = index->blocks[iblock];$

WARNING: please, no space before tabs
#724: FILE: file.c:640:
+// ^I^I// 1. not sure we need to do this (or if we can or should)$

WARNING: please, no space before tabs
#725: FILE: file.c:641:
+// ^I^Iapply_contigue(get_block_number(bno),sb);$

WARNING: please, no space before tabs
#726: FILE: file.c:642:
+// ^I}$

ERROR: trailing whitespace
#727: FILE: file.c:643:
+^I$

WARNING: please, no space before tabs
#728: FILE: file.c:644:
+// ^Istruct buffer_head *bh = sb_bread(sb, get_block_number(bno));$

WARNING: please, no space before tabs
#729: FILE: file.c:645:
+// ^Iif (!bh) {$

WARNING: please, no space before tabs
#730: FILE: file.c:646:
+// ^I^Ibrelse(bh_index);$

WARNING: please, no space before tabs
#731: FILE: file.c:647:
+// ^I^Ireturn -EIO;$

WARNING: please, no space before tabs
#732: FILE: file.c:648:
+// ^I}$

WARNING: please, no space before tabs
#734: FILE: file.c:650:
+// ^Ioffset = *ppos % OUICHEFS_BLOCK_SIZE;$

WARNING: please, no space before tabs
#735: FILE: file.c:651:
+// ^Iremaining = OUICHEFS_BLOCK_SIZE - offset;$

WARNING: please, no space before tabs
#736: FILE: file.c:652:
+// ^Ibytes_to_write = min(len, remaining);$

WARNING: please, no space before tabs
#737: FILE: file.c:653:
+// ^Iif (*(bh->b_data + offset) != 0) {$

WARNING: please, no space before tabs
#738: FILE: file.c:654:
+// ^I^Iif (remaining >= len) {$

ERROR: trailing whitespace
#739: FILE: file.c:655:
+// ^I^I^Imemcpy(bh->b_data + offset + len, bh->b_data, get_block_size(bno)); $

WARNING: please, no space before tabs
#739: FILE: file.c:655:
+// ^I^I^Imemcpy(bh->b_data + offset + len, bh->b_data, get_block_size(bno)); $

WARNING: please, no space before tabs
#740: FILE: file.c:656:
+// ^I^I} else {$

WARNING: please, no space before tabs
#741: FILE: file.c:657:
+// ^I^I^Iint current = inode->i_size - 1;$

WARNING: please, no space before tabs
#742: FILE: file.c:658:
+// ^I^I^Ifor (; current == iblock; current--) {$

WARNING: please, no space before tabs
#743: FILE: file.c:659:
+// ^I^I^I^Iuint32_t current_block = index->blocks[current];$

WARNING: please, no space before tabs
#744: FILE: file.c:660:
+// ^I^I^I^Iuint32_t current_block_size = get_block_size(current_block);$

WARNING: please, no space before tabs
#745: FILE: file.c:661:
+// ^I^I^I^Iif (OUICHEFS_BLOCK_SIZE - current_block_size >= len) {$

WARNING: line length of 101 exceeds 100 columns
#746: FILE: file.c:662:
+// 					declancher_decalage(offset, len, current, iblock, sb, index);

WARNING: please, no space before tabs
#746: FILE: file.c:662:
+// ^I^I^I^I^Ideclancher_decalage(offset, len, current, iblock, sb, index);$

WARNING: please, no space before tabs
#747: FILE: file.c:663:
+// ^I^I^I^I}else {$

WARNING: please, no space before tabs
#748: FILE: file.c:664:
+// ^I^I^I^I^Iif(inode->i_blocks - 1 == (OUICHEFS_MAX_FILESIZE >> 2)) {$

WARNING: please, no space before tabs
#749: FILE: file.c:665:
+// ^I^I^I^I^I^I// pass du espace pour ecriture (echec)$

WARNING: please, no space before tabs
#750: FILE: file.c:666:
+// ^I^I^I^I^I} else {$

WARNING: please, no space before tabs
#751: FILE: file.c:667:
+// ^I^I^I^I^I^I// allouer nouveau bloc$

WARNING: please, no space before tabs
#752: FILE: file.c:668:
+// ^I^I^I^I^I^Iint bno_bis = get_free_block(sbi);$

WARNING: please, no space before tabs
#753: FILE: file.c:669:
+// ^I^I^I^I^I^Iif (!bno_bis) {$

WARNING: please, no space before tabs
#754: FILE: file.c:670:
+// ^I^I^I^I^I^I^Ibrelse(bh);$

WARNING: please, no space before tabs
#755: FILE: file.c:671:
+// ^I^I^I^I^I^I^Ibrelse(bh_index);$

WARNING: please, no space before tabs
#756: FILE: file.c:672:
+// ^I^I^I^I^I^I^Ireturn -ENOSPC;$

WARNING: please, no space before tabs
#757: FILE: file.c:673:
+// ^I^I^I^I^I^I}$

WARNING: line length of 109 exceeds 100 columns
#758: FILE: file.c:674:
+// 						bno_bis = create_block_entry((uint32_t)bno_bis, (uint32_t)0);

WARNING: please, no space before tabs
#758: FILE: file.c:674:
+// ^I^I^I^I^I^Ibno_bis = create_block_entry((uint32_t)bno_bis, (uint32_t)0);$

WARNING: please, no space before tabs
#759: FILE: file.c:675:
+// ^I^I^I^I^I^Iclean_block(sb, bno_bis);$

WARNING: please, no space before tabs
#760: FILE: file.c:676:
+// ^I^I^I^I^I^Iindex->blocks[inode->i_size - 1] = bno_bis;$

WARNING: line length of 112 exceeds 100 columns
#761: FILE: file.c:677:
+// 						declancher_decalage(offset, len, i_size - 1, iblock, sb, index);

WARNING: please, no space before tabs
#761: FILE: file.c:677:
+// ^I^I^I^I^I^Ideclancher_decalage(offset, len, i_size - 1, iblock, sb, index);$

WARNING: please, no space before tabs
#762: FILE: file.c:678:
+// ^I^I^I^I^I}$

WARNING: please, no space before tabs
#763: FILE: file.c:679:
+// ^I^I^I^I}$

WARNING: please, no space before tabs
#764: FILE: file.c:680:
+// ^I^I^I}$

WARNING: please, no space before tabs
#765: FILE: file.c:681:
+// ^I^I}$

WARNING: please, no space before tabs
#766: FILE: file.c:682:
+// ^I}$

WARNING: please, no space before tabs
#767: FILE: file.c:683:
+// ^Ibytes_not_write = copy_from_user(bh->b_data + offset, buf, bytes_to_write);$

WARNING: please, no space before tabs
#768: FILE: file.c:684:
+// ^Iif (bytes_not_write) {$

WARNING: please, no space before tabs
#769: FILE: file.c:685:
+// ^I^Ibrelse(bh);$

WARNING: please, no space before tabs
#770: FILE: file.c:686:
+// ^I^Ibrelse(bh_index);$

WARNING: please, no space before tabs
#771: FILE: file.c:687:
+// ^I^Ireturn -EFAULT;$

WARNING: please, no space before tabs
#772: FILE: file.c:688:
+// ^I}$

WARNING: please, no space before tabs
#773: FILE: file.c:689:
+// ^Imark_buffer_dirty(bh);$

WARNING: please, no space before tabs
#774: FILE: file.c:690:
+// ^Isync_dirty_buffer(bh);$

WARNING: please, no space before tabs
#776: FILE: file.c:692:
+// ^Ibytes_write = bytes_to_write - bytes_not_write;$

WARNING: please, no space before tabs
#777: FILE: file.c:693:
+// ^I*ppos += bytes_write;$

WARNING: please, no space before tabs
#779: FILE: file.c:695:
+// ^Iuint32_t block_number = get_block_number(bno);$

WARNING: please, no space before tabs
#780: FILE: file.c:696:
+// ^Iuint32_t block_size = get_block_size(bno);$

WARNING: please, no space before tabs
#781: FILE: file.c:697:
+// ^Iblock_size = (block_size + (uint32_t)bytes_write);$

WARNING: please, no space before tabs
#782: FILE: file.c:698:
+// ^Ibno = create_block_entry(block_number, block_size);$

WARNING: please, no space before tabs
#783: FILE: file.c:699:
+// ^Iindex->blocks[iblock] = bno;$

WARNING: please, no space before tabs
#785: FILE: file.c:701:
+// ^Ibrelse(bh);$

WARNING: please, no space before tabs
#787: FILE: file.c:703:
+// ^Iif (*ppos > inode->i_size)$

WARNING: please, no space before tabs
#788: FILE: file.c:704:
+// ^I^Iinode->i_size = *ppos;$

WARNING: please, no space before tabs
#790: FILE: file.c:706:
+// ^Iuint32_t nr_blocks_old = inode->i_blocks;$

WARNING: please, no space before tabs
#792: FILE: file.c:708:
+// ^Iinode->i_blocks = inode->i_size / OUICHEFS_BLOCK_SIZE + 2;$

WARNING: please, no space before tabs
#793: FILE: file.c:709:
+// ^Iinode->i_mtime = inode->i_ctime = current_time(inode);$

WARNING: please, no space before tabs
#794: FILE: file.c:710:
+// ^Imark_inode_dirty(inode);$

WARNING: please, no space before tabs
#796: FILE: file.c:712:
+// ^Iif (nr_blocks_old > inode->i_blocks) {$

WARNING: please, no space before tabs
#797: FILE: file.c:713:
+// ^I^Ifor (int i = inode->i_blocks - 1; i < nr_blocks_old - 1; i++) {$

WARNING: please, no space before tabs
#798: FILE: file.c:714:
+// ^I^I^Iput_block(OUICHEFS_SB(sb), index->blocks[i]);$

WARNING: please, no space before tabs
#799: FILE: file.c:715:
+// ^I^I^Iindex->blocks[i] = 0;$

WARNING: please, no space before tabs
#800: FILE: file.c:716:
+// ^I^I}$

WARNING: please, no space before tabs
#801: FILE: file.c:717:
+// ^I}$

WARNING: please, no space before tabs
#802: FILE: file.c:718:
+// ^Imark_buffer_dirty(bh_index);$

WARNING: please, no space before tabs
#803: FILE: file.c:719:
+// ^Isync_dirty_buffer(bh_index);$

WARNING: please, no space before tabs
#804: FILE: file.c:720:
+// ^Ibrelse(bh_index);$

WARNING: please, no space before tabs
#806: FILE: file.c:722:
+// ^Ireturn bytes_write;$

WARNING: line length of 107 exceeds 100 columns
#811: FILE: file.c:727:
+* This function does the write operation by inserting blocs from position where one wants to write content.

WARNING: Block comments should align the * on each line
#811: FILE: file.c:727:
+/*
+* This function does the write operation by inserting blocs from position where one wants to write content.

WARNING: line length of 110 exceeds 100 columns
#813: FILE: file.c:729:
+* This function extends the behavior of writing data to a file in the "ouichefs" filesystem. Here's a summary:

WARNING: line length of 147 exceeds 100 columns
#814: FILE: file.c:730:
+* 1- Space Check: It ensures that there's enough space in the filesystem to accommodate the write operation. If not, it stops and returns an error.

WARNING: line length of 113 exceeds 100 columns
#815: FILE: file.c:731:
+* 2- Position Update: If the file is opened in append mode, it updates the write position to the end of the file.

WARNING: line length of 115 exceeds 100 columns
#816: FILE: file.c:732:
+* 3- Index Block Read: It reads the index block of the file to locate the data blocks that hold the file's content.

WARNING: line length of 134 exceeds 100 columns
#817: FILE: file.c:733:
+* 4- Data Block Location: Based on the current write position, it identifies the specific data block where the data should be written.

WARNING: line length of 202 exceeds 100 columns
#818: FILE: file.c:734:
+* 5- Fragmentation Handling: If the data to be written would cause fragmentation (i.e., if there isn't enough contiguous space in the current block), it rearranges the blocks to make space for the data.

WARNING: line length of 156 exceeds 100 columns
#819: FILE: file.c:735:
+* 6- Data Writing: It copies the data from the user-provided buffer into the data block buffer. If fragmentation occurs, it handles the copying accordingly.

WARNING: line length of 151 exceeds 100 columns
#820: FILE: file.c:736:
+* 7- Metadata Update: After writing the data, it updates the metadata associated with the block to reflect the new size and other relevant information.

WARNING: line length of 114 exceeds 100 columns
#821: FILE: file.c:737:
+* 8- Cleanup: Once the write operation is completed, it releases any buffers or resources used during the process.

WARNING: line length of 146 exceeds 100 columns
#822: FILE: file.c:738:
+* 9- Return: Finally, it returns the number of bytes successfully written to the file, or an error code if any issues occurred during the process.

WARNING: line length of 108 exceeds 100 columns
#824: FILE: file.c:740:
+static ssize_t ouichefs_write_fragment(struct file *filep, const char __user *buf, size_t len, loff_t *ppos)

ERROR: trailing whitespace
#825: FILE: file.c:741:
+{^I$

ERROR: trailing whitespace
#833: FILE: file.c:749:
+^Isize_t bytes_to_write; $

ERROR: trailing whitespace
#840: FILE: file.c:756:
+^I$

WARNING: Missing a blank line after declarations
#845: FILE: file.c:761:
+	uint32_t nr_allocs = max(*ppos + (unsigned int) len, inode->i_size) / OUICHEFS_BLOCK_SIZE;
+	if (nr_allocs > inode->i_blocks - 1)

WARNING: Missing a blank line after declarations
#853: FILE: file.c:769:
+	bool app = (filep->f_flags & O_APPEND) != 0;
+	if (app) {

WARNING: braces {} are not necessary for single statement blocks
#853: FILE: file.c:769:
+	if (app) {
+		*ppos = inode->i_size;
+	}

ERROR: trailing whitespace
#867: FILE: file.c:783:
+^I^I}^I^I$

WARNING: Missing a blank line after declarations
#875: FILE: file.c:791:
+	struct buffer_head *bh = sb_bread(sb, get_block_number(bno));
+	if (!bh) {

WARNING: Missing a blank line after declarations
#884: FILE: file.c:800:
+	size_t number_of_blocks_needed = ((len + offset) / OUICHEFS_BLOCK_SIZE);
+	if (number_of_blocks_needed + inode->i_blocks > (OUICHEFS_BLOCK_SIZE >> 2) - 1) {

WARNING: Missing a blank line after declarations
#892: FILE: file.c:808:
+	int position_to_copy = -1;
+	for (size_t i = offset ; i < OUICHEFS_BLOCK_SIZE; i++) {

ERROR: space required before the open brace '{'
#893: FILE: file.c:809:
+		if (bh->b_data[i] != 0){

ERROR: space required before the open brace '{'
#894: FILE: file.c:810:
+			if (position_to_copy == -1){

ERROR: space required before the open brace '{'
#899: FILE: file.c:815:
+		}else{

ERROR: space required after that close brace '}'
#899: FILE: file.c:815:
+		}else{

ERROR: space required before the open brace '{'
#900: FILE: file.c:816:
+			if (position_to_copy != -1){

WARNING: braces {} are not necessary for single statement blocks
#900: FILE: file.c:816:
+			if (position_to_copy != -1){
+				break;
+			}

ERROR: space required before the open brace '{'
#905: FILE: file.c:821:
+	if (position_to_copy != -1){

WARNING: braces {} are not necessary for single statement blocks
#906: FILE: file.c:822:
+		for (int j = (int)(inode->i_blocks) - 2; j > (int) iblock; j--) {
+			index->blocks[j + number_of_blocks_needed] = index->blocks[j];	
+		}

ERROR: trailing whitespace
#907: FILE: file.c:823:
+^I^I^Iindex->blocks[j + number_of_blocks_needed] = index->blocks[j];^I$

ERROR: trailing whitespace
#909: FILE: file.c:825:
+^I^I$

ERROR: space required before the open brace '{'
#910: FILE: file.c:826:
+		for (int i = iblock + number_of_blocks_needed; i > iblock; i--){

WARNING: Missing a blank line after declarations
#912: FILE: file.c:828:
+			int bno_bis = get_free_block(sbi);
+			if (!bno_bis) {

WARNING: Missing a blank line after declarations
#924: FILE: file.c:840:
+		struct buffer_head *tmpbh = sb_bread(sb, get_block_number(last_inserted_block));
+		if (!tmpbh) {

ERROR: trailing whitespace
#928: FILE: file.c:844:
+^I^I$

ERROR: "foo* bar" should be "foo *bar"
#929: FILE: file.c:845:
+		char* ptr_to_copy_from = bh->b_data + position_to_copy;

WARNING: Missing a blank line after declarations
#930: FILE: file.c:846:
+		char* ptr_to_copy_from = bh->b_data + position_to_copy;
+		memcpy(tmpbh->b_data, ptr_to_copy_from, cmpt);

WARNING: Missing a blank line after declarations
#936: FILE: file.c:852:
+		uint32_t block_size = get_block_size(last_inserted_block);
+		block_size = block_size + (uint32_t)cmpt;

WARNING: Missing a blank line after declarations
#945: FILE: file.c:861:
+		uint32_t block_size_fragment = get_block_size(bno);
+		block_size_fragment = block_size_fragment - (uint32_t)cmpt;

ERROR: trailing whitespace
#951: FILE: file.c:867:
+^I$

WARNING: Missing a blank line after declarations
#966: FILE: file.c:882:
+	uint32_t block_size_fragment = get_block_size(bno);
+	block_size_fragment = (block_size_fragment + (uint32_t)bytes_write);

WARNING: braces {} are not necessary for single statement blocks
#970: FILE: file.c:886:
+	if (*ppos > inode->i_size) {
+		inode->i_size = *ppos;
+	}

ERROR: trailing whitespace
#973: FILE: file.c:889:
+^I$

WARNING: Missing a blank line after declarations
#975: FILE: file.c:891:
+	uint32_t nr_blocks_old = inode->i_blocks;
+	if (inode->i_blocks == 1 || inode->i_blocks == 0){

ERROR: space required before the open brace '{'
#975: FILE: file.c:891:
+	if (inode->i_blocks == 1 || inode->i_blocks == 0){

WARNING: braces {} are not necessary for any arm of this statement
#975: FILE: file.c:891:
+	if (inode->i_blocks == 1 || inode->i_blocks == 0){
[...]
+	} else {
[...]

ERROR: trailing whitespace
#989: FILE: file.c:905:
+^I$

WARNING: 'informations' may be misspelled - perhaps 'information'?
#997: FILE: file.c:913:
+ * informations regarding input file blocks.
    ^^^^^^^^^^^^

WARNING: line length of 126 exceeds 100 columns
#999: FILE: file.c:915:
+ * 1- Function Purpose: The `ouichefs_ioctl` function is responsible for handling IOCTL commands in the "ouichefs" filesystem.

WARNING: line length of 134 exceeds 100 columns
#1000: FILE: file.c:916:
+ * 2- Initialization: It initializes variables and allocates memory for an `ouichefs_ioctl_info` structure to store block information.

WARNING: line length of 163 exceeds 100 columns
#1001: FILE: file.c:917:
+ * 3- Command Validation: It checks if the received command is `OUICHEFS_IOC_GET_INFO`. If not, it returns `-ENOTTY`, indicating that the command is not supported.

WARNING: line length of 154 exceeds 100 columns
#1002: FILE: file.c:918:
+ * 4- Reading Index Block: It reads the index block of the file associated with the given inode to retrieve information about the blocks used by the file.

WARNING: line length of 115 exceeds 100 columns
#1003: FILE: file.c:919:
+ * 5- Iterating Over Blocks: It iterates through the entries in the index block to extract block numbers and sizes.

WARNING: line length of 244 exceeds 100 columns
#1004: FILE: file.c:920:
+ * 6- Collecting Block Information: For each non-zero block entry, it stores the block number and effective size in the `ouichefs_ioctl_info` structure. It also counts partially filled blocks and calculates internal fragmentation if applicable.

WARNING: line length of 132 exceeds 100 columns
#1005: FILE: file.c:921:
+ * 7- Copying to User Space: It copies the collected block information from the kernel space to the user space using `copy_to_user`.

WARNING: line length of 214 exceeds 100 columns
#1007: FILE: file.c:923:
+ * 9- Return Value: If the copy to user space is successful, it returns `0` to indicate success. Otherwise, it returns `-EFAULT` if there's a memory copy error or `-EIO` if there's an error reading the index block.

WARNING: Missing a blank line after declarations
#1018: FILE: file.c:934:
+	struct ouichefs_ioctl_info *info = kmalloc(sizeof(struct ouichefs_ioctl_info), GFP_KERNEL);
+	if (!info) {

WARNING: braces {} are not necessary for single statement blocks
#1018: FILE: file.c:934:
+	if (!info) {
+		return -ENOMEM;
+	}

WARNING: Missing a blank line after declarations
#1038: FILE: file.c:954:
+		uint32_t entry = file_index->blocks[i];
+		if (entry == 0) {

WARNING: braces {} are not necessary for single statement blocks
#1038: FILE: file.c:954:
+		if (entry == 0) {
+			continue;
+		}

ERROR: trailing whitespace
#1055: FILE: file.c:971:
+^I$

WARNING: line length of 104 exceeds 100 columns
#1056: FILE: file.c:972:
+	if (copy_to_user((struct ouichefs_ioctl_info *)arg, info, sizeof(struct ouichefs_ioctl_info))) {

WARNING: please, no spaces at the start of a line
#1061: FILE: file.c:977:
+    return 0;$

WARNING: braces {} are not necessary for single statement blocks
#1086: FILE: file.c:1002:
+	if (get_block_size(current_block) == 0) {
+		return 0;
+	}

WARNING: suspect code indent for conditional statements (8, 8)
#1091: FILE: file.c:1007:
+	if (!bh) {
+        return -EIO;

WARNING: braces {} are not necessary for single statement blocks
#1091: FILE: file.c:1007:
+	if (!bh) {
+        return -EIO;
+    }

ERROR: code indent should use tabs where possible
#1092: FILE: file.c:1008:
+        return -EIO;$

WARNING: please, no spaces at the start of a line
#1092: FILE: file.c:1008:
+        return -EIO;$

WARNING: please, no spaces at the start of a line
#1093: FILE: file.c:1009:
+    }$

ERROR: trailing whitespace
#1094: FILE: file.c:1010:
+^I$

ERROR: space required before the open parenthesis '('
#1096: FILE: file.c:1012:
+		if(bh->b_data[block_pos] != 0) {

WARNING: braces {} are not necessary for any arm of this statement
#1097: FILE: file.c:1013:
+			if (active) {
[...]
+			} else {
[...]

WARNING: line length of 105 exceeds 100 columns
#1104: FILE: file.c:1020:
+				memcpy(bh->b_data + full  + 1, bh->b_data + empty + 1, copy_len - empty);

WARNING: please, no spaces at the start of a line
#1130: FILE: file.c:1046:
+    struct ouichefs_inode_info *ci = OUICHEFS_INODE(inode);$

WARNING: please, no spaces at the start of a line
#1132: FILE: file.c:1048:
+    struct ouichefs_file_index_block *file_index;$

WARNING: please, no spaces at the start of a line
#1133: FILE: file.c:1049:
+    struct buffer_head *bh_index;$

WARNING: braces {} are not necessary for single statement blocks
#1138: FILE: file.c:1054:
+	if (!bh_index) {
+		return -EIO;
+	}

ERROR: trailing whitespace
#1141: FILE: file.c:1057:
+    $

WARNING: please, no spaces at the start of a line
#1141: FILE: file.c:1057:
+    $

WARNING: Missing a blank line after declarations
#1144: FILE: file.c:1060:
+	uint32_t current_block;
+	for (int i = 0; i < (OUICHEFS_BLOCK_SIZE >> 2); i++) {

WARNING: braces {} are not necessary for single statement blocks
#1146: FILE: file.c:1062:
+		if (current_block == 0) {
+			break;
+		}

ERROR: trailing whitespace
#1151: FILE: file.c:1067:
+^I$

WARNING: Missing a blank line after declarations
#1158: FILE: file.c:1074:
+		uint32_t current_block = file_index->blocks[i];
+		if (current_block == 0) {

WARNING: braces {} are not necessary for single statement blocks
#1158: FILE: file.c:1074:
+		if (current_block == 0) {
+			break;
+		}

ERROR: trailing whitespace
#1163: FILE: file.c:1079:
+^I^I$

WARNING: braces {} are not necessary for single statement blocks
#1164: FILE: file.c:1080:
+		if (size == OUICHEFS_BLOCK_SIZE) {
+			continue;
+		}

WARNING: Missing a blank line after declarations
#1177: FILE: file.c:1093:
+		int j = i + 1;
+		for (; j < (OUICHEFS_BLOCK_SIZE >> 2); j++) {

WARNING: braces {} are not necessary for single statement blocks
#1181: FILE: file.c:1097:
+			if (from_block == 0) {
+				break;
+			}

WARNING: braces {} are not necessary for single statement blocks
#1184: FILE: file.c:1100:
+			if (size == OUICHEFS_BLOCK_SIZE) {
+				break;
+			}

WARNING: Missing a blank line after declarations
#1190: FILE: file.c:1106:
+			size_t bytes_to_copy = min(size_left, size_from);
+			bh_bis = sb_bread(sb, get_block_number(from_block));

WARNING: braces {} are not necessary for single statement blocks
#1204: FILE: file.c:1120:
+			if (bytes_to_copy != size_from) {
+				apply_contigue(from_block, sb);
+			}

WARNING: Block comments use * on subsequent lines
#1235: FILE: file.c:1151:
+/*
+This function helps to select the ioctl command to execute

ERROR: patch seems to be corrupt (line wrapped?)
#1253: FILE: file.c:1167:
\ Pas de fin de ligne à la fin du fichier

ERROR: trailing whitespace
#1257: FILE: file.c:1171:
+^I// .read = ouichefs_read,^I$

ERROR: Missing Signed-off-by: line(s)

total: 63 errors, 239 warnings, 1262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

patchfile.patch has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
